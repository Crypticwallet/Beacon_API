get:
  operationId: getLightClientOptimisticUpdate
  summary: Get the latest known `LightClientOptimisticUpdate`
  description: |
    Requests the latest [`LightClientOptimisticUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.2.0-rc.3/specs/altair/light-client/sync-protocol.md#lightclientoptimisticupdate) known by the server.
    Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.

    Servers SHOULD provide results as defined in [`create_light_client_optimistic_update`](https://github.com/ethereum/consensus-specs/blob/v1.2.0-rc.3/specs/altair/light-client/full-node.md#create_light_client_optimistic_update).
  tags:
    - Beacon
  parameters:
    - name: source
      in: query
      description: |
        Source to produce retrieve the SyncAggregate from. Valid values are:
        - `block` (default): Get SyncAggregate from current's head block body, `body.sync_aggregate`

        - `signedcontributionandproof_pool`: Construct SyncAggregate from aggregating `SignedContributionAndProof`
          objects in the node's pool received from the gossip topic `sync_committee_contribution_and_proof`.
          MUST aggregate messages with `message.contribution.slot == current_slot` and `message.contribution.beacon_block_root == head_root`.
  
        - `synccommitteemessage_pool`: Construct SyncAggregate from aggregating `SyncCommitteeMessage` objects in the
          node's pool received from the gossip topics `sync_committee_{subnet_id}`. MUST aggregate messages with`slot == current_slot`
          and `beacon_block_root == head_root`. After receiving a `signatures` request, the node SHOULD subscribe to
          all sync committee subnets.
      schema:
        $ref: "../../../beacon-node-oapi.yaml#/components/schemas/SyncAggregateSource"
  responses:
    "200":
      description: Success
      headers:
        Eth-Consensus-Version:
          $ref: '../../../beacon-node-oapi.yaml#/components/headers/Eth-Consensus-Version'
      content:
        application/json:
          schema:
            title: GetLightClientOptimisticUpdateResponse
            type: object
            properties:
              version:
                $ref: '../../../beacon-node-oapi.yaml#/components/schemas/ConsensusVersion'
              data:
                $ref: '../../../beacon-node-oapi.yaml#/components/schemas/Altair.LightClientOptimisticUpdate'
        application/octet-stream:
          schema:
            description: "SSZ serialized `LightClientOptimisticUpdate` bytes. Use Accept header to choose this response type"
    "404":
      description: "No `LightClientOptimisticUpdate` is available"
      content:
        application/json:
          schema:
            $ref: "../../../beacon-node-oapi.yaml#/components/schemas/ErrorMessage"
            example:
              code: 404
              message: "LC optimistic update unavailable"
    "406":
      description: Unacceptable media type
      content:
        application/json:
          schema:
            $ref: "../../../beacon-node-oapi.yaml#/components/schemas/ErrorMessage"
            example:
              code: 406
              message: "Accepted media type not supported"
    "500":
      $ref: "../../../beacon-node-oapi.yaml#/components/responses/InternalError"
